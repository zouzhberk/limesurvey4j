
package com.limesurvey.remotecotrol.feature;

import com.limesurvey.remotecotrol.internel.JsonRPC;
import com.limesurvey.remotecotrol.options.ActivateSurveyOptions;
import com.limesurvey.remotecotrol.options.ActivateTokensOptions;
import com.limesurvey.remotecotrol.options.AddGroupOptions;
import com.limesurvey.remotecotrol.options.AddLanguageOptions;
import com.limesurvey.remotecotrol.options.AddResponseOptions;
import com.limesurvey.remotecotrol.options.AddSurveyOptions;
import com.limesurvey.remotecotrol.options.CpdImportparticipantsOptions;
import com.limesurvey.remotecotrol.options.DeleteGroupOptions;
import com.limesurvey.remotecotrol.options.DeleteLanguageOptions;
import com.limesurvey.remotecotrol.options.DeleteParticipantsOptions;
import com.limesurvey.remotecotrol.options.DeleteSurveyOptions;
import com.limesurvey.remotecotrol.options.ExportResponsesByTokenOptions;
import com.limesurvey.remotecotrol.options.ExportResponsesOptions;
import com.limesurvey.remotecotrol.options.ExportStatisticsOptions;
import com.limesurvey.remotecotrol.options.ExportTimelineOptions;
import com.limesurvey.remotecotrol.options.GetGroupPropertiesOptions;
import com.limesurvey.remotecotrol.options.GetLanguagePropertiesOptions;
import com.limesurvey.remotecotrol.options.GetParticipantPropertiesOptions;
import com.limesurvey.remotecotrol.options.GetQuestionPropertiesOptions;
import com.limesurvey.remotecotrol.options.GetResponseIdsOptions;
import com.limesurvey.remotecotrol.options.GetSessionKeyOptions;
import com.limesurvey.remotecotrol.options.GetSiteSettingsOptions;
import com.limesurvey.remotecotrol.options.GetSummaryOptions;
import com.limesurvey.remotecotrol.options.GetSurveyPropertiesOptions;
import com.limesurvey.remotecotrol.options.ImportGroupOptions;
import com.limesurvey.remotecotrol.options.ImportQuestionOptions;
import com.limesurvey.remotecotrol.options.ImportSurveyOptions;
import com.limesurvey.remotecotrol.options.InviteParticipantsOptions;
import com.limesurvey.remotecotrol.options.ListGroupsOptions;
import com.limesurvey.remotecotrol.options.ListParticipantsOptions;
import com.limesurvey.remotecotrol.options.ListQuestionsOptions;
import com.limesurvey.remotecotrol.options.ListSurveysOptions;
import com.limesurvey.remotecotrol.options.ListUsersOptions;
import com.limesurvey.remotecotrol.options.MailRegisteredParticipantsOptions;
import com.limesurvey.remotecotrol.options.ReleaseSessionKeyOptions;
import com.limesurvey.remotecotrol.options.RemindParticipantsOptions;
import com.limesurvey.remotecotrol.options.SetGroupPropertiesOptions;
import com.limesurvey.remotecotrol.options.SetLanguagePropertiesOptions;
import com.limesurvey.remotecotrol.options.SetParticipantPropertiesOptions;
import com.limesurvey.remotecotrol.options.SetQuestionPropertiesOptions;
import com.limesurvey.remotecotrol.options.SetSurveyPropertiesOptions;
import com.limesurvey.remotecotrol.options.UpdateResponseOptions;
import retrofit2.http.POST;
import rx.Observable;


/**
 * Generated by class com.limesurvey.java.demo.InterfaceGen.
 * 
 */
public interface SurveyAdmin {


    /**
     *  RPC Routine that launches a newly created survey.<p>
     * 
     * 
     * @param options
     * @return
     *     The result of the activation
     */
    @POST("remotecontrol")
    @JsonRPC("activate_survey")
    public Observable<String> activateSurvey(ActivateSurveyOptions options);

    /**
     *  RPC routine to to initialise the survey's collection of tokens where new participant tokens may be later added.<p>
     * 
     * 
     * @param options
     * @return
     *     Status=>OK when successfull, otherwise the error description
     */
    @POST("remotecontrol")
    @JsonRPC("activate_tokens")
    public Observable<String> activateTokens(ActivateTokensOptions options);

    /**
     *  RPC Routine to add an empty group with minimum details.<p>
     *  Used as a placeholder for importing questions.<p>
     *  Returns the groupid of the created group.<p>
     * 
     * 
     * @param options
     * @return
     *     The id of the new group - Or status
     */
    @POST("remotecontrol")
    @JsonRPC("add_group")
    public Observable<String> addGroup(AddGroupOptions options);

    /**
     *  RPC Routine to add a survey language.<p>
     * 
     * 
     * @param options
     * @return
     *     Status=>OK when successfull, otherwise the error description
     */
    @POST("remotecontrol")
    @JsonRPC("add_language")
    public Observable<String> addLanguage(AddLanguageOptions options);

    /**
     *  RPC Routine to add a response to the survey responses collection.<p>
     *  Returns the id of the inserted survey response<p>
     * 
     * 
     * @param options
     * @return
     *     The response ID
     */
    @POST("remotecontrol")
    @JsonRPC("add_response")
    public Observable<Integer> addResponse(AddResponseOptions options);

    /**
     *  RPC Routine to add an empty survey with minimum details.<p>
     *  Used as a placeholder for importing groups and/or questions.<p>
     * 
     * 
     * @param options
     * @return
     *     array|string|int
     */
    @POST("remotecontrol")
    @JsonRPC("add_survey")
    public Observable<String> addSurvey(AddSurveyOptions options);

    /**
     *  This function import a participant to the LimeSurvey cpd. It stores attributes as well, if they are registered before within ui<p>
     * <p>
     *  Call the function with $response = $myJSONRPCClient->cpd_importParticipants( $sessionKey, $aParticipants);<p>
     * <p>
     *  [[0] => ["email"=>"dummy-02222@limesurvey.com","firstname"=>"max","lastname"=>"mustermann"]]
     * 
     * @param options
     * @return
     *     with status
     */
    @POST("remotecontrol")
    @JsonRPC("cpd_importParticipants")
    public Observable<String> cpdImportparticipants(CpdImportparticipantsOptions options);

    /**
     *  RPC Routine to delete a group of a survey .<p>
     *  Returns the id of the deleted group.<p>
     * 
     * 
     * @param options
     * @return
     *     The id of the deleted group or status
     */
    @POST("remotecontrol")
    @JsonRPC("delete_group")
    public Observable<String> deleteGroup(DeleteGroupOptions options);

    /**
     *  RPC Routine to delete a survey language.<p>
     * 
     * 
     * @param options
     * @return
     *     Status=>OK when successfull, otherwise the error description
     */
    @POST("remotecontrol")
    @JsonRPC("delete_language")
    public Observable<String> deleteLanguage(DeleteLanguageOptions options);

    /**
     *  RPC Routine to delete multiple participants of a Survey.<p>
     *  Returns the id of the deleted token<p>
     * 
     * 
     * @param options
     * @return
     *     Result of deletion
     */
    @POST("remotecontrol")
    @JsonRPC("delete_participants")
    public Observable<String> deleteParticipants(DeleteParticipantsOptions options);

    /**
     *  RPC Routine to delete a survey.<p>
     * 
     * 
     * @param options
     * @return
     *     Returns Status
     */
    @POST("remotecontrol")
    @JsonRPC("delete_survey")
    public Observable<String> deleteSurvey(DeleteSurveyOptions options);

    /**
     *  RPC Routine to export responses.<p>
     *  Returns the requested file as base64 encoded string<p>
     * 
     * 
     * @param options
     * @return
     *     On success: Requested file as base 64-encoded string. On failure array with error information
     */
    @POST("remotecontrol")
    @JsonRPC("export_responses")
    public Observable<String> exportResponses(ExportResponsesOptions options);

    /**
     *  RPC Routine to export token response in a survey.<p>
     *  Returns the requested file as base64 encoded string<p>
     * <p>
     * 
     * 
     * @param options
     * @return
     *     On success: Requested file as base 64-encoded string. On failure array with error information
     */
    @POST("remotecontrol")
    @JsonRPC("export_responses_by_token")
    public Observable<String> exportResponsesByToken(ExportResponsesByTokenOptions options);

    /**
     *  RPC routine to export statistics of a survey to a user.<p>
     *  Returns string - base64 encoding of the statistics.<p>
     * 
     * 
     * @param options
     * @return
     *     Base64 encoded string with the statistics file
     */
    @POST("remotecontrol")
    @JsonRPC("export_statistics")
    public Observable<String> exportStatistics(ExportStatisticsOptions options);

    /**
     *  RPC Routine to export submission timeline.<p>
     *  Returns an array of values (count and period)<p>
     * 
     * 
     * @param options
     * @return
     *     On success: The timeline. On failure array with error information
     */
    @POST("remotecontrol")
    @JsonRPC("export_timeline")
    public Observable<String> exportTimeline(ExportTimelineOptions options);

    /**
     *  RPC Routine to return properties of a group of a survey .<p>
     *  Returns array of properties<p>
     * 
     * 
     * @param options
     * @return
     *     The requested values
     */
    @POST("remotecontrol")
    @JsonRPC("get_group_properties")
    public Observable<String> getGroupProperties(GetGroupPropertiesOptions options);

    /**
     *  RPC Routine to get survey language properties.<p>
     * 
     * 
     * @param options
     * @return
     *     The requested values
     */
    @POST("remotecontrol")
    @JsonRPC("get_language_properties")
    public Observable<String> getLanguageProperties(GetLanguagePropertiesOptions options);

    /**
     *  RPC Routine to return settings of a token/participant of a survey .<p>
     * 
     * 
     * @param options
     * @return
     *     The requested values
     */
    @POST("remotecontrol")
    @JsonRPC("get_participant_properties")
    public Observable<String> getParticipantProperties(GetParticipantPropertiesOptions options);

    /**
     *  RPC Routine to return properties of a question of a survey.<p>
     *  Returns string<p>
     * 
     * 
     * @param options
     * @return
     *     The requested values
     */
    @POST("remotecontrol")
    @JsonRPC("get_question_properties")
    public Observable<String> getQuestionProperties(GetQuestionPropertiesOptions options);

    /**
     *  RPC Routine to find response IDs given a survey ID and a token.
     * 
     * @param options
     * @return
     */
    @POST("remotecontrol")
    @JsonRPC("get_response_ids")
    public Observable<String> getResponseIds(GetResponseIdsOptions options);

    /**
     *  RPC routine to create a session key.<p>
     *  Using this function you can create a new XML/JSON-RPC session key.<p>
     *  This is mandatory for all following LSRC2 function calls.
     * 
     * @param options
     * @return
     *     string
     */
    @POST("remotecontrol")
    @JsonRPC("get_session_key")
    public Observable<String> getSessionKey(GetSessionKeyOptions options);

    /**
     *  RPC Routine to get settings.<p>
     * 
     * 
     * @param options
     * @return
     *     The requested value
     */
    @POST("remotecontrol")
    @JsonRPC("get_site_settings")
    public Observable<String> getSiteSettings(GetSiteSettingsOptions options);

    /**
     *  RPC routine to get survey summary, regarding token usage and survey participation.<p>
     *  Returns the requested value as string.<p>
     * 
     * 
     * @param options
     * @return
     *     The requested value or an array of all values when $sStatName = 'all'
     */
    @POST("remotecontrol")
    @JsonRPC("get_summary")
    public Observable<String> getSummary(GetSummaryOptions options);

    /**
     *  RPC Routine to get survey properties.<p>
     * 
     * 
     * @param options
     * @return
     *     array
     */
    @POST("remotecontrol")
    @JsonRPC("get_survey_properties")
    public Observable<String> getSurveyProperties(GetSurveyPropertiesOptions options);

    /**
     *  RPC Routine to import a group - imports lsg,csv<p>
     * 
     * 
     * @param options
     * @return
     *     iGroupID - ID of the new group or status
     */
    @POST("remotecontrol")
    @JsonRPC("import_group")
    public Observable<String> importGroup(ImportGroupOptions options);

    /**
     *  RPC Routine to import a question - imports lsq,csv.<p>
     * 
     * 
     * @param options
     * @return
     *     iQuestionID - ID of the new question - Or status
     */
    @POST("remotecontrol")
    @JsonRPC("import_question")
    public Observable<String> importQuestion(ImportQuestionOptions options);

    /**
     *  RPC Routine to import a survey - imports lss,csv,xls or survey zip archive.<p>
     * 
     * 
     * @param options
     * @return
     *     iSurveyID - ID of the new survey
     */
    @POST("remotecontrol")
    @JsonRPC("import_survey")
    public Observable<String> importSurvey(ImportSurveyOptions options);

    /**
     *  RPC Routine to invite participants in a survey<p>
     *  Returns array of results of sending<p>
     * 
     * 
     * @param options
     * @return
     *     Result of the action
     */
    @POST("remotecontrol")
    @JsonRPC("invite_participants")
    public Observable<String> inviteParticipants(InviteParticipantsOptions options);

    /**
     *  RPC Routine to return the ids and info of groups belonging to survey .<p>
     *  Returns array of ids and info.<p>
     * 
     * 
     * @param options
     * @return
     *     The list of groups
     */
    @POST("remotecontrol")
    @JsonRPC("list_groups")
    public Observable<String> listGroups(ListGroupsOptions options);

    /**
     *  RPC Routine to return the ids and info of token/participants of a survey.<p>
     *  if $bUnused is true, user will get the list of not completed tokens (token_return functionality).<p>
     *  Parameters iStart and ilimit are used to limit the number of results of this call.<p>
     *  Parameter aAttributes is an optional array containing more attribute that may be requested<p>
     * 
     * 
     * @param options
     * @return
     *     The list of tokens
     */
    @POST("remotecontrol")
    @JsonRPC("list_participants")
    public Observable<String> listParticipants(ListParticipantsOptions options);

    /**
     *  RPC Routine to return the ids and info of (sub-)questions of a survey/group.<p>
     *  Returns array of ids and info.<p>
     * 
     * 
     * @param options
     * @return
     *     The list of questions
     */
    @POST("remotecontrol")
    @JsonRPC("list_questions")
    public Observable<String> listQuestions(ListQuestionsOptions options);

    /**
     *  RPC Routine to list the ids and info of surveys belonging to a user.<p>
     *  Returns array of ids and info.<p>
     *  If user is admin he can get surveys of every user (parameter sUser) or all surveys (sUser=null)<p>
     *  Else only the syrveys belonging to the user requesting will be shown.<p>
     * 
     * 
     * @param options
     * @return
     *     The list of surveys
     */
    @POST("remotecontrol")
    @JsonRPC("list_surveys")
    public Observable<String> listSurveys(ListSurveysOptions options);

    /**
     *  RPC Routine to list the ids and info of users.<p>
     *  Returns array of ids and info.
     * 
     * @param options
     * @return
     *     The list of users
     */
    @POST("remotecontrol")
    @JsonRPC("list_users")
    public Observable<String> listUsers(ListUsersOptions options);

    /**
     *  RPC Routine to send register mails to participants in a survey<p>
     *  Returns array of results of sending<p>
     * <p>
     *  $overrideAllConditions = Array();<p>
     *  $overrideAllConditions[] = 'tid = 2';<p>
     *  $response = $myJSONRPCClient->mail_registered_participants( $sessionKey, $survey_id, $overrideAllConditions );
     * 
     * @param options
     * @return
     *     Result of the action
     */
    @POST("remotecontrol")
    @JsonRPC("mail_registered_participants")
    public Observable<String> mailRegisteredParticipants(MailRegisteredParticipantsOptions options);

    /**
     *  Closes the RPC session<p>
     * 
     * 
     * @param options
     * @return
     *     string
     */
    @POST("remotecontrol")
    @JsonRPC("release_session_key")
    public Observable<String> releaseSessionKey(ReleaseSessionKeyOptions options);

    /**
     *  RPC Routine to send reminder for participants in a survey<p>
     *  Returns array of results of sending<p>
     * 
     * 
     * @param options
     * @return
     *     Result of the action
     */
    @POST("remotecontrol")
    @JsonRPC("remind_participants")
    public Observable<String> remindParticipants(RemindParticipantsOptions options);

    /**
     *  RPC Routine to set group properties.<p>
     * 
     * 
     * @param options
     * @return
     *     Of succeeded and failed modifications according to internal validation.
     */
    @POST("remotecontrol")
    @JsonRPC("set_group_properties")
    public Observable<String> setGroupProperties(SetGroupPropertiesOptions options);

    /**
     *  RPC Routine to set survey language properties.<p>
     * 
     * 
     * @param options
     * @return
     *     Status=>OK, when save successful otherwise error text.
     */
    @POST("remotecontrol")
    @JsonRPC("set_language_properties")
    public Observable<String> setLanguageProperties(SetLanguagePropertiesOptions options);

    /**
     *  RPC Routine to set properties of a survey participant/token.<p>
     *  Returns array<p>
     * 
     * 
     * @param options
     * @return
     *     Result of the change action
     */
    @POST("remotecontrol")
    @JsonRPC("set_participant_properties")
    public Observable<String> setParticipantProperties(SetParticipantPropertiesOptions options);

    /**
     *  RPC Routine to set question properties.<p>
     * 
     * 
     * @param options
     * @return
     *     Of succeeded and failed modifications according to internal validation.
     */
    @POST("remotecontrol")
    @JsonRPC("set_question_properties")
    public Observable<String> setQuestionProperties(SetQuestionPropertiesOptions options);

    /**
     *  RPC Routine to set survey properties.<p>
     * 
     * 
     * @param options
     * @return
     *     Of succeeded and failed nodifications according to internal validation.
     */
    @POST("remotecontrol")
    @JsonRPC("set_survey_properties")
    public Observable<String> setSurveyProperties(SetSurveyPropertiesOptions options);

    /**
     *  RPC Routine to update a response in a given survey.<p>
     *  Routine supports only single response updates.<p>
     *  Response to update will be identified either by the response id, or the token if response id is missing.<p>
     *  Routine is only applicable for active surveys with alloweditaftercompletion = Y.<p>
     * 
     * 
     * @param options
     * @return
     *     TRUE(bool) on success. errormessage on error
     */
    @POST("remotecontrol")
    @JsonRPC("update_response")
    public Observable<String> updateResponse(UpdateResponseOptions options);

}
